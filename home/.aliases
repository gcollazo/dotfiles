#!/bin/bash

# Aliases
alias c="cd $HOME/Code"
alias a="cd $HOME/AppSec"
alias d="cd $HOME/Desktop"
alias dl="cd $HOME/Downloads"
alias h="cd $HOME/"
alias ls='ls -lah'
alias o='open .'
alias v='code .'
alias r='npm run'
alias zshconfig="code ~/.zshrc"
alias docs='cd ~/Code/alias/docs && yarn run watch'
alias awsume=". ~/.pyenv/versions/3.9.0/bin/awsume"

# System
alias update='sudo softwareupdate --install --all --verbose'

# Git
alias gsync='gpull && gpush'
alias gfetch='git fetch --prune --all'
alias gpull='git pull --rebase origin $(git rev-parse --abbrev-ref HEAD)'
alias gpush='git push origin $(git rev-parse --abbrev-ref HEAD)'
alias gbranches='git branch -a'
function gi() { curl "https://www.toptal.com/developers/gitignore/api/$1"; }

# Random
alias server='npx http-server'
alias http-listener='node $HOME/Code/dotfiles/utils/http-listener.js'
alias android-emulator='$HOME/Library/Android/sdk/emulator/emulator -avd Pixel_3a_API_30_x86'

# AppSec
function gobuster() {
  # Usage: gobuster https://example.com
  docker run \
  -v ~/AppSec/WordLists:/WordLists \
  devalias/gobuster \
  -w /WordLists/common-words.txt -u "$@"
}

function wfuzz() {
  # Usage: wfuzz https://example.com/FUZZ
  docker run \
  -v ~/AppSec/WordLists:/WordLists \
  ghcr.io/xmendez/wfuzz \
  wfuzz -w /WordLists/common-words.txt --hc 404 "$@"
}

function amass() {
  # Usage: amass example.com
  docker run \
  -v ~/AppSec/WordLists:/WordLists \
  caffix/amass \
  enum -brute -w /WordLists/common-words.txt -d "$@"
}

function nmap() {
  # Usage: nmap example.com | 1.2.3.4
  docker run \
  securecodebox/nmap \
  nmap -sV -sT -sC "$@"
}

function sqlmap() {
  # Usage: sqlmap --url example.com/?id=1
  docker run \
  paoloo/sqlmap "$@"
}

# Docker
function docker-sh() {
  docker run \
  -it --entrypoint /bin/sh \
  "$@"
}

# NPM
function npmls() {
  npm list --depth=0 "$1" 2>/dev/null
}

# Archive / unarchive
function archive() {
  tar -cvzf "arhive.tar.gz" "$@"
}
function archive-ls() {
  tar -tvf "$@"
}
function unarchive() {
  tar -xvf "$@"
}

# Network
alias dig="dig @8.8.8.8"
alias flushdns="sudo killall -HUP mDNSResponder"
function ipinfo() { curl "https://ipinfo.io/$1"; }

# Show all ip addresses
function ips() {
  if [[ $(uname) == 'Darwin' ]]; then
    interface='en'
  else
    interface='eth'
  fi
  for NUMBER in $(seq 0 9); do
    ip=$(ifconfig "$interface$NUMBER" 2>/dev/null |
      grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' |
      grep -Eo '([0-9]*\.){3}[0-9]*')

    if [ -n "$ip" ]; then
      echo "Local($interface$NUMBER): $ip"
    fi
  done
  echo "Remote:     $(curl -s https://ipinfo.io/ip)"
}

# Send notification via Slack
function notify() {
  curl -X POST --data-urlencode "payload={\"text\":\"$1\"}" "$SLACK_WEBHOOK" &>/dev/null
}

# ssh: expose a local port
function ssh-tunnel-remote-to-local() {
  if [[ -z "$1" ]]; then
    printf '\nUsage:\n\tssh-tunnel-local-to-remote <REMOTE_PORT> <LOCAL_PORT> <CONN>\n\n'
    return
  fi

  REMOTE_PORT="$1"
  LOCAL_PORT="$2"
  CONN="$3"

  ssh -nNT -R "$REMOTE_PORT":localhost:"$LOCAL_PORT" "$CONN"
}

# ssh: connect to remote port
function ssh-tunnel-local-to-remote() {
  if [[ -z "$1" ]]; then
    printf '\nUsage:\n\tssh-tunnel-local-to-remote <LOCAL_PORT> <REMOTE_HOST> <REMOTE_PORT> <CONN>\n\n'
    return
  fi

  LOCAL_PORT="$1"
  REMOTE_HOST="$2"
  REMOTE_PORT="$3"
  CONN="$4"

  ssh -nNT -L "$LOCAL_PORT":"$REMOTE_HOST":"$REMOTE_PORT" "$CONN"
}

# ssh: starts a SOCKS proxy on $LOCAL_PORT
function ssh-proxy() {
  if [[ -z "$1" ]]; then
    printf '\nUsage:\n\tssh-proxy <LOCAL_PORT> <CONN>\n\n'
    return
  fi

  LOCAL_PORT="$1"
  CONN="$2"

  ssh -qNC -D "$LOCAL_PORT" "$CONN"
}

# AWS KMS Encrypt and Decrypt
function kms-encrypt() {
  if [[ -z "$1" ]]; then
    printf '\nUsage:\n\tkms-encrypt <PLAINTEXT> <CONTEXT> <KEY> <PROFILE>\n\n'
    return
  fi

  aws kms encrypt \
  --cli-binary-format raw-in-base64-out \
  --plaintext "$1" \
  --encryption-context "$2" \
  --key-id "$3" \
  --profile "$4" \
  | jq -r ".CiphertextBlob"
}

function kms-decrypt() {
  if [[ -z "$1" ]]; then
    printf '\nUsage:\n\tkms-decrypt <CIPHERTEXT> <CONTEXT> <PROFILE>\n\n'
    return
  fi
  aws kms decrypt \
  --ciphertext-blob fileb://<(echo "$1" | base64 -D) \
  --encryption-context "$2" \
  --profile "$3" \
  | jq -r ".Plaintext"
}

function generate-random-password() {
  openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

zsh_stats () {
  fc -l 1 | \
  awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | \
  column -c3 -s " " -t | sort -nr | nl | head -n20
}

qrcode () {
  local input="$*"
  [ -z "$input" ] && local input="@/dev/stdin"
  curl -d "$input" https://qrcode.show
}

qrsvg () {
  local input="$*"
  [ -z "$input" ] && local input="@/dev/stdin"
  curl -d "${input}" https://qrcode.show -H "Accept: image/svg+xml"
}
