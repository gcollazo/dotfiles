# Only show the current directory's name in the tab
export PROMPT_COMMAND='echo -ne "\033]0;${PWD##*/}\007"'

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

GREEN='\e[0;32m'      # Green
YELLOW='\e[0;33m'     # Yellow
PURPLE='\e[0;35m'     # Purple
BLUE=$(tput setaf 33) # Blue
RED='\e[1;31m'        # Red
VIOLET="\e[1;35m";    # Violet
RESET='\e[0m'         # Text Reset

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${BLUE}${s}";
    else
        return;
    fi;
}

PS1="\[${GREEN}\]\u " # user
PS1+="\[${RESET}\]at \[${YELLOW}\]\h " # hostname
PS1+="\[${RESET}\]in \[${RED}\]\w" # working directory
PS1+="\[${BLUE}\]\$(prompt_git \"\[${RESET}\] on \[${PURPLE}\]\")" # git
PS1+="\[${RED}\]\n→ \[${RESET}\]"
